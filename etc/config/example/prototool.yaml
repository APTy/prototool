# Paths to exclude when searching for Protobuf files.
excludes:
  - path/to/a
  - path/to/b/file.proto

# Protoc directives.
protoc:
  # The Protobuf version to use from https://github.com/protocolbuffers/protobuf/releases.
  # By default use 3.6.1.
  # You probably want to set this to make your builds completely reproducible.
  version: 3.6.1

  # Additional paths to include with -I to protoc.
  # By default, the directory of the config file is included,
  # or the current directory if there is no config file.
  includes:
    - ../../vendor/github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis

  # Include the Extended Well-Known Types.
  # Currently, this is just google/api/annotations.proto and google/api/http.proto.
  # Note that setting this would mean you would not need to include googleapis in the includes list above.
  include_extended_wkt: true

  # If not set, compile will fail if there are unused imports.
  # Setting this will ignore unused imports.
  allow_unused_imports: true

# Create directives.
create:
  # List of mappings from relative directory to base package.
  # This affects how packages are generated with create.
  packages:
    # This means that a file created "foo.proto" in the current directory will have package "bar".
    # A file created "a/b/foo.proto" will have package "bar.a.b".
    - directory: .
      name: bar
    # This means that a file created "idl/code.uber/a/b/c.proto" will have package "uber.a.b".
    - directory: idl/code.uber
      name: uber

# Lint directives.
lint:
  # Linter files to ignore.
  ignores:
    - id: RPC_NAMES_CAMEL_CASE
      files:
        - path/to/foo.proto
        - path/to/bar.proto
    - id: SYNTAX_PROTO3
      files:
        - path/to/foo.proto

  # Linter rules.
  # Run prototool list-all-linters to see all available linters.
  rules:
    # Determines whether or not to include the default set of linters.
    no_default: true

    # The specific linters to add.
    add:
      - ENUM_NAMES_CAMEL_CASE
      - ENUM_NAMES_CAPITALIZED

    # The specific linters to remove.
    remove:
      - ENUM_NAMES_CAMEL_CASE

# Code generation directives.
generate:
  # The base output path for all plugins.
  # If this is specified and a relative output path is also specified for an individual.
  # plugin, the paths will be concatenated.
  output: ../../.gen/proto
  # Options that will apply to all plugins of type go and gogo.
  go_options:
    # The base import path. This should be the go path of the prototool.yaml file.
    # This is required if you have any go plugins.
    import_path: uber/foo/bar.git/idl/uber

    # Extra modifiers to include with Mfile=package.
    # Note that if include_extended_wkt is set, the below modifiers will be automatically included.
    extra_modifiers:
      google/api/annotations.proto: google.golang.org/genproto/googleapis/api/annotations
      google/api/http.proto: google.golang.org/genproto/googleapis/api/annotations

  # The list of plugins.
  plugins:
      # The Well-Known Plugin Alias. If set, this will result in default values being set
      # For all of the other options.
      # See prototool generate --list-well-known-plugins for the default values for each alias.
    - alias: gogo-with-grpc

      # The plugin name. This will go to protoc with --name_out, so it either needs
      # to be a built-in name (like java), or a plugin name with a binary
      # protoc-gen-name.
    name: gogo

      # The type, if any. Valid types are go, gogo.
      # Use go if your plugin is a standard Golang plugin
      # that uses github.com/golang/protobuf imports, use gogo
      # if it uses github.com/gogo/protobuf imports. For protoc-gen-go
      # use go, For protoc-gen-gogo, protoc-gen-gogoslick, etc, use gogo.
      type: gogo

      # Extra flags to specify.
      # The only flag you will generally set is plugins=grpc for Golang.
      # The Mfile=package flags are automatically set.
      # ** Otherwise, generally do not set this unless you know what you are doing. **
      flags: plugins=grpc

      # The path to output generated files to.
      # If the directory does not exist, it will be created when running generation.
      # This needs to be a relative path.
      # Note if relative, this is concatenated with the top-level output path.
      output: go

      # Optional override for the plugin path. For example, if you set set path to
      # /usr/local/bin/gogo_plugin", prototool will add the
      # "--plugin=protoc-gen-gogo=/usr/local/bin/gogo_plugin" flag to protoc calls.
      # Note this can be a program name, and Prototool will search for the program on the PATH.
      path: /usr/local/bin/gogo

    - name: yarpc-go
      type: gogo
      output: go

    - name: grpc-gateway
      type: go
      output: go

    - name: java
      output: java